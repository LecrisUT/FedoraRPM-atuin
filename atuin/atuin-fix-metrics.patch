Subject: [PATCH] fix(metrics): update macros after update
---
Index: crates/atuin-server-postgres/Cargo.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-server-postgres/Cargo.toml b/crates/atuin-server-postgres/Cargo.toml
--- a/crates/atuin-server-postgres/Cargo.toml	(revision 84589cab15253300984bfaca1392795c39d137fc)
+++ b/crates/atuin-server-postgres/Cargo.toml	(revision 897ba4389cf5eba0d12b52099853aa0a0a99c091)
@@ -20,6 +20,6 @@
 sqlx = { workspace = true }
 async-trait = { workspace = true }
 uuid = { workspace = true }
-metrics = "0.21.1"
+metrics = "0.24"
 futures-util = "0.3"
 url = "2.5.2"
Index: crates/atuin-server-postgres/src/lib.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-server-postgres/src/lib.rs b/crates/atuin-server-postgres/src/lib.rs
--- a/crates/atuin-server-postgres/src/lib.rs	(revision 84589cab15253300984bfaca1392795c39d137fc)
+++ b/crates/atuin-server-postgres/src/lib.rs	(revision 897ba4389cf5eba0d12b52099853aa0a0a99c091)
@@ -670,11 +670,11 @@
         let equal = res == cached_res;
 
         if equal {
-            counter!("atuin_store_idx_cache_consistent", 1);
+            counter!("atuin_store_idx_cache_consistent").increment(1);
         } else {
             // log the values if we have an inconsistent cache
             tracing::debug!(user = user.username, cache_match = equal, res = ?res, cached = ?cached_res, "record store index request");
-            counter!("atuin_store_idx_cache_inconsistent", 1);
+            counter!("atuin_store_idx_cache_inconsistent").increment(1);
         };
 
         for i in res.iter() {
Index: crates/atuin-server/Cargo.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-server/Cargo.toml b/crates/atuin-server/Cargo.toml
--- a/crates/atuin-server/Cargo.toml	(revision 84589cab15253300984bfaca1392795c39d137fc)
+++ b/crates/atuin-server/Cargo.toml	(revision 897ba4389cf5eba0d12b52099853aa0a0a99c091)
@@ -32,6 +32,6 @@
 rustls = { version = "0.23", features = ["ring"], default-features = false }
 argon2 = "0.5"
 semver = { workspace = true }
-metrics-exporter-prometheus = "0.12.1"
-metrics = "0.21.1"
+metrics-exporter-prometheus = "0.16.0"
+metrics = "0.24.1"
 postmark = {version= "0.11", features=["reqwest", "reqwest-rustls-tls"]}
Index: crates/atuin-server/src/handlers/history.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-server/src/handlers/history.rs b/crates/atuin-server/src/handlers/history.rs
--- a/crates/atuin-server/src/handlers/history.rs	(revision 84589cab15253300984bfaca1392795c39d137fc)
+++ b/crates/atuin-server/src/handlers/history.rs	(revision 897ba4389cf5eba0d12b52099853aa0a0a99c091)
@@ -65,7 +65,7 @@
 
     if req.sync_ts.unix_timestamp_nanos() < 0 || req.history_ts.unix_timestamp_nanos() < 0 {
         error!("client asked for history from < epoch 0");
-        counter!("atuin_history_epoch_before_zero", 1);
+        counter!("atuin_history_epoch_before_zero").increment(1);
 
         return Err(
             ErrorResponse::reply("asked for history from before epoch 0")
@@ -95,7 +95,7 @@
         user.id
     );
 
-    counter!("atuin_history_returned", history.len() as u64);
+    counter!("atuin_history_returned").increment(history.len() as u64);
 
     Ok(Json(SyncHistoryResponse { history }))
 }
@@ -131,7 +131,7 @@
     let State(AppState { database, settings }) = state;
 
     debug!("request to add {} history items", req.len());
-    counter!("atuin_history_uploaded", req.len() as u64);
+    counter!("atuin_history_uploaded").increment(req.len() as u64);
 
     let mut history: Vec<NewHistory> = req
         .into_iter()
@@ -151,7 +151,7 @@
         // Don't return an error here. We want to insert as much of the
         // history list as we can, so log the error and continue going.
         if !keep {
-            counter!("atuin_history_too_long", 1);
+            counter!("atuin_history_too_long").increment(1);
 
             tracing::warn!(
                 "history too long, got length {}, max {}",
Index: crates/atuin-server/src/handlers/user.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-server/src/handlers/user.rs b/crates/atuin-server/src/handlers/user.rs
--- a/crates/atuin-server/src/handlers/user.rs	(revision 84589cab15253300984bfaca1392795c39d137fc)
+++ b/crates/atuin-server/src/handlers/user.rs	(revision 897ba4389cf5eba0d12b52099853aa0a0a99c091)
@@ -146,7 +146,7 @@
         .await;
     }
 
-    counter!("atuin_users_registered", 1);
+    counter!("atuin_users_registered").increment(1);
 
     match db.add_session(&new_session).await {
         Ok(_) => Ok(Json(RegisterResponse { session: token })),
@@ -173,7 +173,7 @@
             .with_status(StatusCode::INTERNAL_SERVER_ERROR));
     };
 
-    counter!("atuin_users_deleted", 1);
+    counter!("atuin_users_deleted").increment(1);
 
     Ok(Json(DeleteUserResponse {}))
 }
Index: crates/atuin-server/src/handlers/v0/record.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-server/src/handlers/v0/record.rs b/crates/atuin-server/src/handlers/v0/record.rs
--- a/crates/atuin-server/src/handlers/v0/record.rs	(revision 84589cab15253300984bfaca1392795c39d137fc)
+++ b/crates/atuin-server/src/handlers/v0/record.rs	(revision 897ba4389cf5eba0d12b52099853aa0a0a99c091)
@@ -25,14 +25,14 @@
         "request to add records"
     );
 
-    counter!("atuin_record_uploaded", records.len() as u64);
+    counter!("atuin_record_uploaded").increment(records.len() as u64);
 
     let keep = records
         .iter()
         .all(|r| r.data.data.len() <= settings.max_record_size || settings.max_record_size == 0);
 
     if !keep {
-        counter!("atuin_record_too_large", 1);
+        counter!("atuin_record_too_large").increment(1);
 
         return Err(
             ErrorResponse::reply("could not add records; record too large")
@@ -108,7 +108,7 @@
         }
     };
 
-    counter!("atuin_record_downloaded", records.len() as u64);
+    counter!("atuin_record_downloaded").increment(records.len() as u64);
 
     Ok(Json(records))
 }
Index: crates/atuin-server/src/handlers/v0/store.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-server/src/handlers/v0/store.rs b/crates/atuin-server/src/handlers/v0/store.rs
--- a/crates/atuin-server/src/handlers/v0/store.rs	(revision 84589cab15253300984bfaca1392795c39d137fc)
+++ b/crates/atuin-server/src/handlers/v0/store.rs	(revision 897ba4389cf5eba0d12b52099853aa0a0a99c091)
@@ -24,14 +24,14 @@
     }) = state;
 
     if let Err(e) = database.delete_store(&user).await {
-        counter!("atuin_store_delete_failed", 1);
+        counter!("atuin_store_delete_failed").increment(1);
         error!("failed to delete store {e:?}");
 
         return Err(ErrorResponse::reply("failed to delete store")
             .with_status(StatusCode::INTERNAL_SERVER_ERROR));
     }
 
-    counter!("atuin_store_deleted", 1);
+    counter!("atuin_store_deleted").increment(1);
 
     Ok(())
 }
Index: crates/atuin-server/src/metrics.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-server/src/metrics.rs b/crates/atuin-server/src/metrics.rs
--- a/crates/atuin-server/src/metrics.rs	(revision 84589cab15253300984bfaca1392795c39d137fc)
+++ b/crates/atuin-server/src/metrics.rs	(revision 897ba4389cf5eba0d12b52099853aa0a0a99c091)
@@ -48,8 +48,8 @@
         ("status", status),
     ];
 
-    metrics::increment_counter!("http_requests_total", &labels);
-    metrics::histogram!("http_requests_duration_seconds", latency, &labels);
+    metrics::counter!("http_requests_total", &labels).increment(1);
+    metrics::histogram!("http_requests_duration_seconds", &labels).record(latency);
 
     response
 }
