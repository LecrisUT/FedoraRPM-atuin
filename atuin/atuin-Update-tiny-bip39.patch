Subject: [PATCH] Update to tiny-bip39 2.0.0
---
Index: Cargo.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cargo.lock b/Cargo.lock
--- a/Cargo.lock	(revision 92fa8d49ee35b13b55a674fe2abcae4ba87c983a)
+++ b/Cargo.lock	(revision 57eecfd742a52982f5aec5e45e00e3b29cebc6a0)
@@ -3025,11 +3025,12 @@
 
 [[package]]
 name = "pbkdf2"
-version = "0.11.0"
+version = "0.12.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "83a0692ec44e4cf1ef28ca317f14f8f07da2d95ec3fa01f86e4467b725e60917"
+checksum = "f8ed6a7761f76e3b9f92dfb0a60a6a6477c61024b775147ff0973a02653abaf2"
 dependencies = [
  "digest",
+ "hmac",
 ]
 
 [[package]]
@@ -4797,12 +4798,10 @@
 
 [[package]]
 name = "tiny-bip39"
-version = "1.0.0"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "62cc94d358b5a1e84a5cb9109f559aa3c4d634d2b1b4de3d0fa4adc7c78e2861"
+checksum = "a30fd743a02bf35236f6faf99adb03089bb77e91c998dac2c2ad76bb424f668c"
 dependencies = [
- "anyhow",
- "hmac",
  "once_cell",
  "pbkdf2",
  "rand 0.8.5",
Index: crates/atuin-client/Cargo.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-client/Cargo.toml b/crates/atuin-client/Cargo.toml
--- a/crates/atuin-client/Cargo.toml	(revision 92fa8d49ee35b13b55a674fe2abcae4ba87c983a)
+++ b/crates/atuin-client/Cargo.toml	(revision 57eecfd742a52982f5aec5e45e00e3b29cebc6a0)
@@ -65,7 +65,7 @@
 hex = { version = "0.4", optional = true }
 sha2 = { version = "0.10", optional = true }
 indicatif = "0.17.7"
-tiny-bip39 = "=1.0.0"
+tiny-bip39 = "2.0.0"
 
 # theme
 crossterm = { version = "0.28.1", features = ["serde"] }
Index: crates/atuin-client/src/login.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin-client/src/login.rs b/crates/atuin-client/src/login.rs
--- a/crates/atuin-client/src/login.rs	(revision 92fa8d49ee35b13b55a674fe2abcae4ba87c983a)
+++ b/crates/atuin-client/src/login.rs	(revision 57eecfd742a52982f5aec5e45e00e3b29cebc6a0)
@@ -23,25 +23,17 @@
     let key = match bip39::Mnemonic::from_phrase(&key, bip39::Language::English) {
         Ok(mnemonic) => encode_key(Key::from_slice(mnemonic.entropy()))?,
         Err(err) => {
-            match err.downcast_ref::<bip39::ErrorKind>() {
-                Some(err) => {
-                    match err {
-                        // assume they copied in the base64 key
-                        bip39::ErrorKind::InvalidWord => key,
-                        bip39::ErrorKind::InvalidChecksum => {
-                            bail!("key mnemonic was not valid")
-                        }
-                        bip39::ErrorKind::InvalidKeysize(_)
-                        | bip39::ErrorKind::InvalidWordLength(_)
-                        | bip39::ErrorKind::InvalidEntropyLength(_, _) => {
-                            bail!("key was not the correct length")
-                        }
-                    }
+            match err {
+                // assume they copied in the base64 key
+                bip39::ErrorKind::InvalidWord(_) => key,
+                bip39::ErrorKind::InvalidChecksum => {
+                    bail!("key mnemonic was not valid")
+                }
+                bip39::ErrorKind::InvalidKeysize(_)
+                | bip39::ErrorKind::InvalidWordLength(_)
+                | bip39::ErrorKind::InvalidEntropyLength(_, _) => {
+                    bail!("key was not the correct length")
                 }
-                _ => {
-                    // unknown error. assume they copied the base64 key
-                    key
-                }
             }
         }
     };
Index: crates/atuin/Cargo.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin/Cargo.toml b/crates/atuin/Cargo.toml
--- a/crates/atuin/Cargo.toml	(revision 92fa8d49ee35b13b55a674fe2abcae4ba87c983a)
+++ b/crates/atuin/Cargo.toml	(revision 57eecfd742a52982f5aec5e45e00e3b29cebc6a0)
@@ -70,7 +70,7 @@
 semver = { workspace = true }
 rustix = { workspace = true }
 runtime-format = "0.1.3"
-tiny-bip39 = "1"
+tiny-bip39 = "2"
 futures-util = "0.3"
 fuzzy-matcher = "0.3.7"
 colored = "2.0.4"
Index: crates/atuin/src/command/client/account/login.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin/src/command/client/account/login.rs b/crates/atuin/src/command/client/account/login.rs
--- a/crates/atuin/src/command/client/account/login.rs	(revision 92fa8d49ee35b13b55a674fe2abcae4ba87c983a)
+++ b/crates/atuin/src/command/client/account/login.rs	(revision 57eecfd742a52982f5aec5e45e00e3b29cebc6a0)
@@ -77,25 +77,17 @@
             match bip39::Mnemonic::from_phrase(&key, bip39::Language::English) {
                 Ok(mnemonic) => encode_key(Key::from_slice(mnemonic.entropy()))?,
                 Err(err) => {
-                    match err.downcast_ref::<bip39::ErrorKind>() {
-                        Some(err) => {
-                            match err {
-                                // assume they copied in the base64 key
-                                bip39::ErrorKind::InvalidWord => key,
-                                bip39::ErrorKind::InvalidChecksum => {
-                                    bail!("key mnemonic was not valid")
-                                }
-                                bip39::ErrorKind::InvalidKeysize(_)
-                                | bip39::ErrorKind::InvalidWordLength(_)
-                                | bip39::ErrorKind::InvalidEntropyLength(_, _) => {
-                                    bail!("key was not the correct length")
-                                }
-                            }
+                    match err {
+                        // assume they copied in the base64 key
+                        bip39::ErrorKind::InvalidWord(_) => key,
+                        bip39::ErrorKind::InvalidChecksum => {
+                            bail!("key mnemonic was not valid")
+                        }
+                        bip39::ErrorKind::InvalidKeysize(_)
+                        | bip39::ErrorKind::InvalidWordLength(_)
+                        | bip39::ErrorKind::InvalidEntropyLength(_, _) => {
+                            bail!("key was not the correct length")
                         }
-                        _ => {
-                            // unknown error. assume they copied the base64 key
-                            key
-                        }
                     }
                 }
             }
Index: crates/atuin/src/command/client/store/rekey.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crates/atuin/src/command/client/store/rekey.rs b/crates/atuin/src/command/client/store/rekey.rs
--- a/crates/atuin/src/command/client/store/rekey.rs	(revision 92fa8d49ee35b13b55a674fe2abcae4ba87c983a)
+++ b/crates/atuin/src/command/client/store/rekey.rs	(revision 57eecfd742a52982f5aec5e45e00e3b29cebc6a0)
@@ -20,33 +20,23 @@
         let key = if let Some(key) = self.key.clone() {
             println!("Re-encrypting store with specified key");
 
-            let key = match bip39::Mnemonic::from_phrase(&key, bip39::Language::English) {
+            match bip39::Mnemonic::from_phrase(&key, bip39::Language::English) {
                 Ok(mnemonic) => encode_key(Key::from_slice(mnemonic.entropy()))?,
                 Err(err) => {
-                    match err.downcast_ref::<bip39::ErrorKind>() {
-                        Some(err) => {
-                            match err {
-                                // assume they copied in the base64 key
-                                bip39::ErrorKind::InvalidWord => key,
-                                bip39::ErrorKind::InvalidChecksum => {
-                                    bail!("key mnemonic was not valid")
-                                }
-                                bip39::ErrorKind::InvalidKeysize(_)
-                                | bip39::ErrorKind::InvalidWordLength(_)
-                                | bip39::ErrorKind::InvalidEntropyLength(_, _) => {
-                                    bail!("key was not the correct length")
-                                }
-                            }
+                    match err {
+                        // assume they copied in the base64 key
+                        bip39::ErrorKind::InvalidWord(_) => key,
+                        bip39::ErrorKind::InvalidChecksum => {
+                            bail!("key mnemonic was not valid")
+                        }
+                        bip39::ErrorKind::InvalidKeysize(_)
+                        | bip39::ErrorKind::InvalidWordLength(_)
+                        | bip39::ErrorKind::InvalidEntropyLength(_, _) => {
+                            bail!("key was not the correct length")
                         }
-                        _ => {
-                            // unknown error. assume they copied the base64 key
-                            key
-                        }
-                    }
-                }
-            };
-
-            key
+                    }
+                }
+            }
         } else {
             println!("Re-encrypting store with freshly-generated key");
             let (_, encoded) = generate_encoded_key()?;
